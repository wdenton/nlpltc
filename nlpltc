#!/usr/bin/env ruby

# Generate a nice-looking printed LibraryThing catalogue
#
# William Denton <wtd@pobox.com>

require "csv"
require "erb"
require "htmlentities"
require "json"

csv = ARGV[0]
if csv.nil?
  puts "Please specify a LibraryThing CSV export file"
  exit
end

tex_template = "template.tex.erb"

# Layout of the LibraryThing CSV export file:
# (Note that this is slightly different from the Excel file!)
#
#  0 'TITLE',
#  1 "'AUTHOR (first, last)'",
#  2 "'AUTHOR (last, first)'",
#  3 'DATE',
#  4 'LCC',
#  5 'DDC',
#  6 'ISBN',
#  7 "'PUBLICATION INFO'",
#  8 'COMMENTS',
#  9 'RATING',
# 10 'REVIEW',
# 11 "'ENTRY DATE'",
# 12 'COPIES',
# 13 'SUBJECTS',
# 14 'TAGS'

items = []

lt_data = File.read(csv)

# There may be UTF-8 encoding issues, and this back-and-forth should solve them.
lt_data.encode!("UTF-16", "UTF-8", :invalid => :replace, :replace => "")
lt_data.encode!("UTF-8", "UTF-16")

# This we use to turn any escaped HTML into real characters.
coder = HTMLEntities.new

CSV.parse(lt_data, :headers => true, :header_converters => :symbol) do |row|
  row[:author_last_first] = "[unknown]" if row[:author_last_first].nil?
  row[:ddc] = "[---]" if row[:ddc].nil?
  row[:publication_info] = coder.decode(row[:publication_info]).gsub("&", "\\\&")
  row[:author_last_first] = coder.decode(row[:author_last_first]).gsub("&", "\\\&")
  row[:tags] = coder.decode(row[:tags]).gsub("&", "\\\&").gsub(/,/, ", ")

  book = {
    title:            coder.decode(row[:title]).gsub("&", "\\\&"),
    author:           row[:author_last_first],
    publication:      row[:publication_info].to_s + ". " + row[:date].to_s,
    ddc:              row[:ddc],
    tags:             row[:tags]
  }
  items << book
end

STDERR.puts "Processed #{items.size} books"

# lastauthor = ""

# puts items.to_json
# exit

tex = IO.read(tex_template)
template = ERB.new(tex, 0, "%<>")
catalogue = template.result
puts catalogue
