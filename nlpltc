#!/usr/bin/env ruby

# Generate a nice-looking printed LibraryThing catalogue
#
# William Denton <wtd@pobox.com>

require "csv"
require "docopt"
require "erb"
require "htmlentities"
require "json"

doc = <<DOCOPT
  Make a nice-looking printed catalogue of a LibraryThing library

  Usage:  #{__FILE__} -i export.json

  Options:
  -i, --input FILE    Input file
  -o, --output FILE   Output file [default: catalogue.tex]
DOCOPT

options = Docopt.docopt(doc)

tex_template = "template.tex.erb"

items = []

lt = JSON.parse(File.read(options["--input"].to_s))

# There may be UTF-8 encoding issues, and this back-and-forth should solve them.
# lt_data.encode!("UTF-16", "UTF-8", :invalid => :replace, :replace => "")
# lt_data.encode!("UTF-8", "UTF-16")

# This we use to turn any escaped HTML into real characters.
coder = HTMLEntities.new

lt.each do |id|
  # title, publication, date, tags = ""
  authors = "UNKNOWN"
  ddc = "UNK"

  # STDERR.puts "--------"
  book = id[1]
  title = coder.decode(book["title"]).gsub("&", "\\\\&")
  publication = coder.decode(book["publication"].to_s).gsub("&", "\\\\&")
  STDERR.puts publication
  date = book["date"].to_s

  ddc = book["ddc"]["code"].first if book["ddc"]
  tags = book["tags"]

  if book["authors"].size > 1
    book["authors"].each_index do |i|
      if i.zero?
        authors = coder.decode(book["authors"][i]["lf"]).gsub("&", "\\\&")
        if book["authors"][i]["role"]
          authors = authors + " (" + book["authors"][i]["role"].gsub("&", "\\\&") + ")"
        end
      else
        authors = authors + ", " + coder.decode(book["authors"][i]["fl"]).gsub("&", "\\\&")
        if book["authors"][i]["role"]
          authors = authors + " (" + book["authors"][i]["role"].gsub("&", "\\\&") + ")"
        end
      end
    end
  end

  book = {
    title:            title,
    author:           authors,
    publication:      publication + ", " + date + ".",
    ddc:              ddc,
    tags:             tags
  }
  items << book
end

STDERR.puts "Processed #{items.size} books"

lastauthor = ""

tex = IO.read(tex_template)
template = ERB.new(tex, 0, "%<>")
catalogue = template.result
puts catalogue
