#!/usr/bin/env ruby
# coding: utf-8

# Generate a nice-looking printed LibraryThing catalogue
#
# William Denton <wtd@pobox.com>

require "csv"
require "docopt"
require "erb"
require "htmlentities"
require "json"
require "titleize"

doc = <<DOCOPT
  Make a nice-looking printed catalogue of a LibraryThing library

  Usage:  #{__FILE__} -i export.json

  Options:
  -i, --input FILE    Input file
  -o, --output FILE   Output file [default: catalogue.tex]
DOCOPT

options = Docopt.docopt(doc)

tex_template = "template.tex.erb"

items = []

lt = JSON.parse(File.read(options["--input"].to_s))

# There may be UTF-8 encoding issues, and this back-and-forth should solve them.
# lt_data.encode!("UTF-16", "UTF-8", :invalid => :replace, :replace => "")
# lt_data.encode!("UTF-8", "UTF-16")

# This we use to turn any escaped HTML into real characters.
coder = HTMLEntities.new

lt.each do |id|
  authors = "UNKNOWN"
  ddc = "UNK"
  tags = ""

  book = id[1]
  title = coder.decode(book["title"].to_s).gsub("&", "\\\\&").titleize
  publication = coder.decode(book["publication"].to_s).gsub("&", "\\\\&")
  date = book["date"].to_s

  ddc = book["ddc"]["code"].first if book["ddc"]

  # Tags are entered separated by commas, then exported
  # as an array.  Here we rejoin them with commas.
  tags = book["tags"].join(", ") if book["tags"]

  unless book["authors"][0].empty?
    # If authors == [[]] then we need to skip this,
    # and stick with the default, "UNKNOWN"
    book["authors"].each_index do |i|
      if i.zero?
        authors = coder.decode(book["authors"][i]["lf"]).gsub("&", "\\\&")
      else
        if i == book["authors"].length - 1
          authors += " and "
        else
          authors += ", "
        end
        authors += coder.decode(book["authors"][i]["fl"]).gsub("&", "\\\&")
      end
      if book["authors"][i]["role"] && book["authors"][i]["role"] != "Author"
        authors += " (" + coder.decode(book["authors"][i]["role"]).gsub("&", "\\\&") + ")"
      end
    end
    authors += "."
  end

  book = {
    title:       title,
    author:      authors,
    publication: publication + ", " + date + ".",
    ddc:         ddc,
    tags:        tags
  }
  STDERR.puts book
  items << book
end

STDERR.puts "Processed #{items.size} books"

lastauthor = ""

tex = IO.read(tex_template)
template = ERB.new(tex, 0, "%<>")
catalogue = template.result
puts catalogue
