#!/usr/bin/env ruby
# frozen_string_literal: true

# Generate a nice-looking printed LibraryThing catalogue
#
# William Denton <wtd@pobox.com>

require "csv"
require "docopt"
require "erb"
require "htmlentities"
require "json"
require "titleize"

doc = <<DOCOPT
  Make a nice-looking printed catalogue of a LibraryThing library

  Usage:  #{__FILE__} [options]

  Options:
  -i FILE --input=FILE     Input file
  -o FILE --output=FILE    Output file [default: catalogue.tex]
  -t FILE --template=FILE  LaTeX template [default: templates/wendy.tex.erb]
  -v --verbose             Be verbose
DOCOPT

options = Docopt.docopt(doc)

input_file = options["--input"]
output_file = options["--output"]
tex_template = options["--template"]
verbose = options["--verbose"]

items = []

lt = JSON.parse(File.read(input_file.to_s))

# There may be UTF-8 encoding issues, and this back-and-forth should solve them.
# lt_data.encode!("UTF-16", "UTF-8", :invalid => :replace, :replace => "")
# lt_data.encode!("UTF-8", "UTF-16")

# This we use to turn any escaped HTML into real characters.
coder = HTMLEntities.new

lt.each do |id|
  author_line = "UNKNOWN"
  authors = []
  ddc = "UNK"
  tags = ""

  book = id[1]
  title = coder.decode(book["title"].to_s).gsub("&", "\\\\&").gsub("#", "\\\\#").titleize
  publication = coder.decode(book["publication"].to_s).gsub("&", "\\\\&")
  date = book["date"].to_s

  ddc = book["ddc"]["code"].first if book["ddc"]

  # Tags are entered separated by commas, then exported
  # as an array.  Here we rejoin them with commas.
  tags = book["tags"].join(", ") if book["tags"]

  ## Make a function that formats the line in LaTeX the way I want it,
  ## then include that in the export and use it.  Too much ugly stuff
  ## in the template.
  ##
  ## Also, do the lastauthor bit again in my new look.

  unless book["authors"][0].empty?
    # If authors == [[]] then we need to skip this,
    # and stick with the default, "UNKNOWN"
    author_name = ""
    latex_author_line = ""
    role = ""
    book["authors"].each_index do |i|
      if i.zero?
        author_name = coder.decode(book["authors"][i]["lf"]).gsub("&", "\\\&")
        author_line = author_name
        latex_author_line = %q(\textbf{) + author_name + "}"
      else
        if i == book["authors"].length - 1
          author_line += " and "
          latex_author_line += " and "
        else
          author_line += ", "
          latex_author_line += ", "
        end
        author_name = coder.decode(book["authors"][i]["fl"]).gsub("&", "\\\&")
        author_line += author_name
        latex_author_line += %q(\textbf{) + author_name + "}"
      end
      if book["authors"][i]["role"] &&
         book["authors"][i]["role"] != "Author" &&
         book["authors"][i]["role"] != "Author."
        role = coder.decode(book["authors"][i]["role"]).gsub("&", "\\\&")
        author_line += " (" + role + ")"
        latex_author_line += " (" + role + ")"
      end
      authors << [author_name, role]
    end

    # warn latex_author_line

    # Single author names like "Hart, Peter R." end with a period,
    # so don't add one.
    author_line += "." unless author_line[-1] == "."
    # -2 for LaTeX line because there's a closing }
    latex_author_line += "." unless latex_author_line[-2] == "."
  end

  book = {
    title: title,
    author_line: author_line,
    latex_author_line: latex_author_line,
    authors: authors,
    publication: publication + ", " + date + ".",
    ddc: ddc,
    tags: tags
  }
  warn book if @verbose
  items << book
end

warn "Processed #{items.size} books"

# warn items

lastauthor = ""

tex = IO.read(tex_template)
template = ERB.new(tex, 0, "%<>")
catalogue = template.result

# puts catalogue

File.open(output_file, "w") do |f|
  f.write(catalogue)
end
